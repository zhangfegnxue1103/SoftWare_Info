# ** EXAM OBJECTIVE: INDEXING DATA **
#考试目的：索引数据
# GOAL: Create, update and delete indices while satisfying a given 
#目标：满足给出设定需求吗，创建、修改并删除索引
#       set of requirements
# 1、 REQUIRED SETUP: 
#    (i)   a running Elasticsearch cluster with at least one node and a Kibana instance,
#			运行一个至少一节点的es和kibana实例
#    (ii)  the cluster has no index with name `hamlet`, 
#			删除集群上的索引 hamlet
#    (iii) the cluster has no template that applies to indices starting by `hamlet`
#			删除集群上应用到hamlet的索引模板

DELETE hamlet*
DELETE _template/hamlet*

# 2、 Create the index `hamlet-raw` with 1 primary shard and 3 replicas
#		创建索引名称hamlet-raw，1分片，3副本
PUT hamlet-raw
{
  "settings": {
    "number_of_replicas": 3,
    "number_of_shards": 1
  }
}

#3、 Add a document to `hamlet-raw`, so that the document 
#	(i)		has id "1", ID号为1
#	(ii)	has default type,  类型为_doc
#	(iii)	has one field named `line`  with value "To be, or not to be: that is the question"
#		 	key是line，value是 "To be, or not to be: that is the question"
POST hamlet-raw/_doc/1
{
  "line":"To be, or not to be: that is the question"
}
}

# 4、 Update the document with id "1" by adding a field named  `line_number` with value "3.1.64"
#修改文档id为1的字段名称为line_number，value值为"3.1.64"

# method 01 推荐
POST hamlet-raw/_update/1
{
    "doc" : {
        "line_number" : "3.1.64"
    }
}

# method 2
POST hamlet-raw/_update/1
{
    "script" : "ctx._source.line_number_methond2 = '3.1.64'"
}

GET hamlet-raw/_search

# 5、 Add a new document to `hamlet-raw`, so that the document 
#添加新文档到hamlet-raw
# (i) has the id automatically assigned by Elasticsearch, 
#		文档id自动分配
# (ii) has default type, 
#		文档默认类型
# (iii) has a field named `text_entry` with value "Whether tis nobler in the mind to suffer",
#		字段名称 text_entry， value值为 "Whether tis nobler in the mind to suffer"
# (iv) has a field named `line_number` with value "3.1.66"
#		字段名称 line_number， value值为 "3.1.66"
# Update the last document by setting the value of `line_number` to "3.1.65"
修改上一个文档line_number为3.1.65
# In one request, update all documents in `hamlet-raw` by adding a new field named `speaker` with value "Hamlet"
# 在一个请求中，修改在hamlet-raw中的所有文档添加一个新字段名称speaker，value值为Hamlet

POST hamlet-raw/_doc
{
  "text_entry":"Whether tis nobler in the mind to suffer",
  "line_number":"3.1.66"
}

POST hamlet-raw/_update/WSCUnG0BqJrkWJT5Gz0g
{
  "doc" : {
  "line_number":"3.1.65"
  }
}

GET hamlet-raw/_doc/WSCUnG0BqJrkWJT5Gz0g

#method 1 pipeline方式
PUT _ingest/pipeline/speaker-Hamlet
{
  "description" : "speaker-Hamlet",
  "processors" : [ {
      "set" : {
        "field": "speaker",
        "value": "Hamlet"
      }
  } ]
}
POST hamlet-raw/_update_by_query?pipeline=speaker-Hamlet

GET hamlet-raw/_search

# method 2 script方式
POST hamlet-raw/_update_by_query
{
  "script": {
    "source" : "ctx._source.speaker_method2 = 'Hamlet'",
    "lang": "painless"
  },
  "query": {
   "match_all":{}
  }
}
GET hamlet-raw/_search

# 6 Update the document with id "1" by renaming the field `line` into `text_entry`
#	修改文档id为1的line字段重命名为text_entry



# 7 Create the index `hamlet` and add some documents by running the following _bulk commandPUT
#	创建索引hamlet并添加一些文档使用bulk命令

PUT hamlet/_bulk
{"index":{"_index":"hamlet","_id":0}}
{"line_number":"1.1.1","speaker":"BERNARDO","text_entry":"Whos there?"}
{"index":{"_index":"hamlet","_id":1}}
{"line_number":"1.1.2","speaker":"FRANCISCO","text_entry":"Nay, answer me: stand, and unfold yourself."}
{"index":{"_index":"hamlet","_id":2}}
{"line_number":"1.1.3","speaker":"BERNARDO","text_entry":"Long live the king!"}
{"index":{"_index":"hamlet","_id":3}}
{"line_number":"1.2.1","speaker":"KING CLAUDIUS","text_entry":"Though yet of Hamlet our dear brothers death"}
{"index":{"_index":"hamlet","_id":4}}
{"line_number":"1.2.2","speaker":"KING CLAUDIUS","text_entry":"The memory be green, and that it us befitted"}
{"index":{"_index":"hamlet","_id":5}}
{"line_number":"1.3.1","speaker":"LAERTES","text_entry":"My necessaries are embarkd: farewell:"}
{"index":{"_index":"hamlet","_id":6}}
{"line_number":"1.3.4","speaker":"LAERTES","text_entry":"But let me hear from you."}
{"index":{"_index":"hamlet","_id":7}}
{"line_number":"1.3.5","speaker":"OPHELIA","text_entry":"Do you doubt that?"}
{"index":{"_index":"hamlet","_id":8}}
{"line_number":"1.4.1","speaker":"HAMLET","text_entry":"The air bites shrewdly; it is very cold."}
{"index":{"_index":"hamlet","_id":9}}
{"line_number":"1.4.2","speaker":"HORATIO","text_entry":"It is a nipping and an eager air."}
{"index":{"_index":"hamlet","_id":10}}
{"line_number":"1.4.3","speaker":"HAMLET","text_entry":"What hour now?"}
{"index":{"_index":"hamlet","_id":11}}
{"line_number":"1.5.2","speaker":"Ghost","text_entry":"Mark me."}
{"index":{"_index":"hamlet","_id":12}}
{"line_number":"1.5.3","speaker":"HAMLET","text_entry":"I will."}


# Create a script named `set_is_hamlet` and save it into the cluster state. 
# The script 
#	(i) adds a field named `is_hamlet` to each  document, 
#	(ii) sets the field to "true" if the document has `speaker` equals to "HAMLET", 
#	(iii) sets the field to "false" otherwise
#创建一个script为 set_is_hamlet并保存到集群状态中。
#script 实现：
#	添加字段名称is-hamlet到每个文档中
#	如果文档中speaker==HAMLET,字段设定为true
#	其他情况字段设定为false
# Update all documents in `hamlet` by running the `set_is_hamlet` script
#在索引hamlet中运行 `set_is_hamlet` script，修改所有文档

GET hamlet/_search

GET _scripts/set_is_hamlet
DELETE _scripts/set_is_hamlet

# method 1 使用painless方式
POST hamlet/_update_by_query
{
   "script": {
    "lang": "painless",
    "source": """
     if (ctx._source.speaker == "HAMLET") { 
       ctx._source.is_hamlet = true;
     } else 
     {
       ctx._source.is_hamlet = false;
     } 
"""
  }
}

# method 2 使用pipeline方式
POST hamlet/_doc
{
  "speaker":"3333"
}

GET hamlet/_search

PUT _ingest/pipeline/set_is_hamlet
{
    "processors": [
      {
        "script": {
          "source": """
            if (ctx.speaker_method2 == 'Hamlet') { ctx.is_hamlet = true; } else  { ctx.is_hamlet = false;}
          """
        }
      }
    ]
}

POST hamlet-raw/_update_by_query?pipeline=set_is_hamlet
{
  "query":{
    "match_all":{}
  }
}




# 8 Remove from `hamlet` the documents that have either "KING CLAUDIUS" or "LAERTES" as the value of `speaker`
#从索引hamlet中移除speaker的value是"KING CLAUDIUS" 或 "LAERTES"的文档
POST hamlet/_search

POST hamlet/_delete_by_query
{
  "query": {
    "bool":{
      "should": [
        {
          "term": {
            "speaker.keyword": {
              "value": "KING CLAUDIUS"
            }
          }
        },
         {
          "term": {
            "speaker.keyword": {
              "value": "LAERTES"
            }
          }
        }
      ]
    }
  }
}
