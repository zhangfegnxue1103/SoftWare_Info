# ** EXAM OBJECTIVE: INSTALLATION AND CONFIGURATION **
考试目的：安装和配置
# GOAL: Secure a cluster and an index using Elasticsearch Security
目标：使用Elasticsearch Security保护集群和索引
# REQUIRED SETUP:
所需设置：
#  (i)  a running Elasticsearch cluster with at least one node and
#       a Kibana instance,
		运行Elasticsearch集群，至少具有一个节点和一个kibana实例
#  (ii) no index with name `hamlet` is indexed on the cluster
		在集群上没有hamlet的索引
# Enable xPack security on the cluster
在集群上启用xPack security
# Set the password of the `elastic` and `kibana` built-in users. Use
#    the pattern "{{username}}-password" (e.g., "elastic-password")
设定内建用户elastic和kibana的密码，密码格式：用户名-password
# Login to Kibana using the `elastic` user credentials
使用elastic用户凭据登录kibana


#We are now going to use the _bulk API to index some documents into the cluster. The documents are lines from Hamlet by William Shakespeare, and have the following structure:
使用_bulk API 索引一些文档到集群中，结构如下：

{
  "line_number": "String",
  "speaker": "String",
  "text_entry": "String",
}

#Let’s continue with the exercise.
# Create the index `hamlet` and add some documents by running the
#    following _bulk command:
创建hamlet索引并使用bulk命令写入数据：

PUT hamlet/_bulk
{"index":{"_index":"hamlet","_id":0}}
{"line_number":"1","speaker":"BERNARDO","text_entry":"Whos there?"}
{"index":{"_index":"hamlet","_id":1}}
{"line_number":"2","speaker":"FRANCISCO","text_entry":"Nay, answer me: stand, and unfold yourself."}
{"index":{"_index":"hamlet","_id":2}}
{"line_number":"3","speaker":"BERNARDO","text_entry":"Long live the king!"}
{"index":{"_index":"hamlet","_id":3}}
{"line_number":"4","speaker":"FRANCISCO","text_entry":"Bernardo?"}
{"index":{"_index":"hamlet","_id":4}}
{"line_number":"5","speaker":"BERNARDO","text_entry":"He."}
{"index":{"_index":"hamlet","_id":5}}
{"line_number":"6","speaker":"FRANCISCO","text_entry":"You come most carefully upon your hour."}
{"index":{"_index":"hamlet","_id":6}}
{"line_number":"7","speaker":"BERNARDO","text_entry":"Tis now struck twelve; get thee to bed, Francisco."}
{"index":{"_index":"hamlet","_id":7}}
{"line_number":"8","speaker":"FRANCISCO","text_entry":"For this relief much thanks: tis bitter cold,"}
{"index":{"_index":"hamlet","_id":8}}
{"line_number":"9","speaker":"FRANCISCO","text_entry":"And I am sick at heart."}
{"index":{"_index":"hamlet","_id":9}}
{"line_number":"10","speaker":"BERNARDO","text_entry":"Have you had quiet guard?"}

#You can specify authentication (“who are you”) and authorisation (“what you can do”) policies on the Elasticsearch resources by means of users, roles, and mappings between users and roles. Do you know how to do that?
配置用户和角色指定什么用户和什么角色，可以做什么？

# Create the security role `francisco_role` in the native realm, so #    that:
在原生realm中创建安全角色francisco_role：
#    (i)  the role has "monitor" privileges on the cluster,
		  这个角色有monitor权限
#    (ii) the role has all privileges on the `hamlet` index
		  这个角色有hamlet索引的全部权限
# Create the user `francisco` with password "francisco-password"
创建用户francisco密码francisco-password
# Assign the role `francisco_role` to the `francisco` user
分配角色francisco_role给francisco用户
# Login using the `francisco`  role privileges were correctly set
使用francisco用户凭据登录，运行huser credentials, and run queries on
#    `hamlet` to verify that theamlet查询，验证角色权限是否正确设定

验证步骤
GET hamlet/_search
PUT hamlet/_doc/1
{"tesst":"1111"}
DELETE hamlet
GET _cat/indices
DELETE .kibana_1


Not bad, right? Now, let’s create a more sophisticated security role, which assigns read-only permissions on indices, documents and fields.
为索引、文档和字段分配只读权限，
#Create the security role `bernardo_role` in the native realm, so 
原生realm中创建安全角色bernardo_role
#    that:
#    (i)   the role has "monitor" privileges on the cluster,
			在集群上拥有"monitor"权限
#    (ii)  the role has read-only privileges on the `hamlet` index,
			在hamlet索引上拥有只读权限
#    (iii) the role can see only those documents having "BERNARDO" 
#          as a `speaker`,
			仅限于查看speaker中有BERNARDO字段的文档
#    (iv)  the role can see only the `text_entry` field
			只能查看text_entry字段
# Create the user `bernardo` with password "bernardo-password"
创建用户bernardo，密码bernardo-password
# Assign the role `bernardo_role` to the `bernardo` user
分配角色bernardo_role给用户bernardo

POST /_security/role/bernardo_role
{
  "run_as": [ "bernardo" ],
  "cluster": [ "monitor" ],
  "indices": [
    {
      "names": [ "hamlet" ],
      "privileges": [ "read" ],
      "field_security" : {
         "grant" : [ "text_entry" ]
      },
       "query": "{\"match\": {\"speaker\": \"BERNARDO\"}}"
    }
  ]
}

# may be error because of 'license'
因为授权的关系，可能会产生报错

匹配范围修改为全部索引只读，仅限于查看speaker中有BERNARDO字段的文档
POST /_security/role/bernardo_role
{
  "indices": [
    {
      "names": [ "*" ],
      "privileges": [ "read" ],
      "query": "{\"match\": {\"speaker\": \"BERNARDO\"}}"
    }
  ]
}

匹配范围修改为hamlet索引为只读，授权查看text_entry字段
POST /_security/role/bernardo_role
{
  "indices": [
    {
      "names": [ "hamlet" ],
      "privileges": [ "read" ],
      "field_security" : {
        "grant" : [ "text_entry" ]
      }
    }
  ]
}

# Login using the `bernardo` user credentials, and run queries on 
#    `hamlet` to verify that the role privileges were correctly set
使用bernardo用户凭据，在hamlet索引上运行query请求，验证角色权限设定是否正确
Whoops, I asked you to assign the wrong password to the “bernardo” user. My bad. Would you be so kind as to change it?
特别注意检查：bernado用户的密码分配是否正确；


# Change the password of the `bernardo` user to "poor-bernardo"
通过命令直接修改密码
(Never forget to check if it worked!)


POST /_security/user/bernardo/_password
{
  "password" : "123456"
}









